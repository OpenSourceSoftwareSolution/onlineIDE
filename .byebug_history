c
language
c
params
c
language
c
params
c
l=(UserSubmission.languages.values_at user_submission.language)[0]
l=(UserSubmission.languages.values_at user_submission.language)
l=UserSubmission.languages.values_at user_submission.language[0]
l=UserSubmission.languages.values_at user_submission.language
UserSubmission.languages.public_methods
l.type
l.public_methods
l.to_i
l.to)i
l=UserSubmission.languages.values_at user_submission.language
UserSubmission.languages.values_at user_submission.language
UserSubmission.languages.values_at 'ruby'
UserSubmission.languages.value_at 'ruby'
UserSubmission.languages.public_methods
UserSubmission.languages
UserSubmission.languages 'ruby'
UserSubmission.languages.ruby
UserSubmission.languages.find "a"
UserSubmission.languages.find("a")
UserSubmission.languages.find(user_submission.language)
UserSubmission.languages.find
UserSubmission.languages
UserSubmission.languages.(user_submission.language)
UserSubmission.languages.user_submission.language
UserSubmission.languages.include? user_submission.language
UserSubmission.languages.include user_submission.language
UserSubmission.languages user_submission.language
user_submission.language
user_submission.language = 0
user.language = 0
language_validation
c
UserSubmission.languages user_submission.language
UserSubmission.languages user_language
UserSubmission.languages.user_language
UserSubmission.languages
UserSubmission.language
user.language = 0
user.language.to_i
user.language
user.extension = user.language.to_i
user.extension = user.language
user.language
user.language = 1
user = UserSubmission.new
language_validation
n
language
params
c
params
c
n
params
c
language.include? 'ruy'
languages.include? 'ruy'
languages.include? 'ruby'
Self.languages.include? 'ruby'
self.
c
UserSubmission.languages.include? 'ruby'
UserSubmission.languages.include? 'rb'
UserSubmission.languages
UserSubmission.language
UserSubmission.languages
UserSubmission.where(language: 'rub')
UserSubmission.where(language: 'ruby')
user.language = 2
user.language = 3
user.language = 5
user.extension.include? '.rb'
user.extension
user.language
user.language=1
user = UserSubmission.new
user = UsersSubmission.new
user = UsersSubmissions.new
c
system('gcc tmp/one.c -o tmp/one.out')
c
id=system('ruby tmp/ruby.rb >& tmp/result.txt')
@result
n
status
n
c
id=system('ruby tmp/ruby.rb >& tmp/result.txt')
id=system('ruby tmp/ruby.rb > tmp/result.txt')
id=system('ruby tmp/ruby.rb< tmp/testcases.txt > tmp/result.txt')
c
id=system('ruby tmp/ruby.rb< tmp/testcases.txt > tmp/result.txt')
c
id=system('ruby tmp/ruby.rb< tmp/testcases.txt > tmp/result.txt')
c
id=system('ruby tmp/ruby.rb< tmp/testcases.txt > tmp/result.txt')
c
id=system('ruby tmp/ruby.rb< tmp/testcases.txt > tmp/result.txt')
system('ruby tmp/ruby.rb< tmp/testcases.txt > tmp/result.txt')
c
params
c
@result
n
params
c
params
c
 v  
params[:result]
c
@result
c
params
@result
c
puts "#{a}"
a
a=10
params
c
params
c
params
c
params
@result
c
@result
c
params
c
params
c
params
c
params
c
@result
c
params
c
params
c
system './tmp/one.out', '2'
system('./tmp/one.out \r\2')
system('./tmp/one.out')
system('./tmp/one.out \r 2\r')
system('./tmp/one.out \n 2\n')
system('./tmp/one.out \n 2 \n')
c
system('./tmp/one.out \n 2')
system('./tmp/one.out \r 2')
2
system('./tmp/one.out \r 2')
c
system('./tmp/one.out' '2' )
system('./tmp/one.out'<'2')
system('./tmp/one.out 2')
system('./tmp/one.out')
params
c
params[:code]
paramas[:code]
parmas[:code]
c
params[:code]
c
system('make tmp/one.c -o tmp/one')
system('./tmp/one > tmp/result.txt')
system('./tmp/one.c > tmp/result.txt')
system('make tmp/one.c -o tmp/one')
system('make tmp/one')
params[:code]
file.read
file.content
file
file = File.open('tmp/one.c', 'w')
system('./tmp/one.c')
system('make tmp/one.c')
c
n
c
params
c
=line
<% File.read('tmp/result.txt').each do |line| 
@result
@result.each 
@result.each do |line|
@result.each_line
@result
c
@result
c
@result
c
@result
c
n
nn
n
nn
n
params
c
@result = File.read('tmp/result.txt')
system('ruby tmp/ruby.rb > tmp/result.txt')
 File.read('tmp/result.txt')
@result
c
@result
params[:code]
c
@result
c
params
